# Rotate Array

// O(n) time complexity and O(n) space complexity

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> numsCopy(n);
        for (int i = 0; i < n; i++)
            numsCopy[i] = nums[i];
        
        for (int i = 0; i < n; i++)
            nums[(i + k)%n] = numsCopy[i];
    }
};

// O(n) time complexity and O(1) space complexity

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n = nums.size();
        k = k%n;
        
        reverse(nums, 0, n-1);
        reverse(nums, 0, k-1);
        reverse(nums, k, n-1);
    }
    
    void reverse(vector<int> &nums, int l, int h){
        while(l<h){
            swap(nums[l], nums[h]);
            l++;
            h--;
        }
    }
};