# Add Two Numbers

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* insertVal(ListNode* head, int num){
        ListNode* newNode = new ListNode();
        ListNode* curr = head;
        newNode->val = num;
        if(head == NULL)
            return newNode;
        
        while(curr->next!=NULL)
            curr = curr->next;
    
        curr->next = newNode;
        return head;
    }
    
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* head = NULL;
        int carry=0, sum=0; 
        while(l1!=NULL && l2!=NULL){
            sum = l1->val + l2->val + carry;
            head = insertVal(head, sum%10);        
            carry = sum/10;
            
            l1 = l1->next;
            l2 = l2->next;
        }
        
        if(l1 == NULL && l2== NULL && carry!=0){
            head = insertVal(head, carry);
        }
        
        while(l1 != NULL){
            sum = l1->val + carry;
            head = insertVal(head, sum%10);
            carry = sum/10;
            l1 = l1->next;
            
            if(l1 == NULL && carry!=0)
                head = insertVal(head, carry);
        }
        
        while(l2 != NULL){
            sum = l2->val + carry;
            head = insertVal(head, sum%10);
            carry = sum/10;
            l2 = l2->next;
            
            if(l2 == NULL && carry!=0)
                head = insertVal(head, carry);
        }
        
        return head;
    }
};