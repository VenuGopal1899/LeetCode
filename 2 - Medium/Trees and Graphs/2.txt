# Binary Tree Zigzag Level Order Traversal

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    void reverse(vector<int> &temp){
        int len = temp.size();
        int arr[len];
        for(int i=0; i<len; i++)
            arr[i] = temp[i];
        
        for(int i=len-1; i>=0; i--)
            temp[len-1-i] = arr[i];
    }
    
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> res;
        if(root == NULL)
            return res;
        if(root->left == NULL && root->right == NULL){
            vector<int> temp;
            temp.push_back(root->val);
            res.push_back(temp);
            return res;
        }
        
        queue<TreeNode*> q;
        q.push(root);
        int level = 1;
        
        while(!q.empty()){
            int len = q.size();
            vector<int> temp;
            while(len--){
                TreeNode* top = q.front();
                temp.push_back(top->val);
                q.pop();
                
                if(top->left != NULL){
                    q.push(top->left);
                }
                
                if(top->right!= NULL){
                    q.push(top->right);
                }
            }
            
            if(level%2 == 0){
                reverse(temp);   
            }
            res.push_back(temp);
            level++;
        }
        return res;
        
    }
};