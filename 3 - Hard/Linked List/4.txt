# Merge Two Sorted Lists

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
public:
    ListNode* insertNode(ListNode* root, int data){
        ListNode* newNode = new ListNode();
        newNode->val = data;
        
        if(root == NULL){
            return newNode;
        }
        else{
            ListNode* curr = root;
            while(curr->next != NULL){
                curr = curr->next;
            }
            curr->next = newNode;
        }
        return root;
    }
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* root = new ListNode();
        root = NULL;
        while(l1 != NULL && l2 != NULL){
            if(l1->val > l2->val){
                root = insertNode(root, l2->val);
                l2 = l2->next;
            }
            else if(l1->val < l2->val){
                root = insertNode(root, l1->val);
                l1 = l1->next;
            }
            else{
                root = insertNode(root, l1->val);
                root = insertNode(root, l1->val);
                l1 = l1->next;
                l2 = l2->next;
            }
        }   
        
        while(l1 != NULL){
            root = insertNode(root, l1->val);
            l1 = l1->next;
        }
        
        while(l2 != NULL){
            root = insertNode(root, l2->val);
            l2 = l2->next;
        }
        return root;
    }
};