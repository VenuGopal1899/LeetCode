# Binary Tree Level Order Traversal

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        // Calculate number of levels
        vector<vector<int>> err;
        if(root == NULL)
            return err;
        
        TreeNode* temp = root;
        queue<TreeNode*> tq;
        tq.push(temp);
        int no_of_levels = 0;

        while(!tq.empty()){
            int l = tq.size();
            while(l--){
                TreeNode* top = tq.front();
                tq.pop();

                if (top->left != NULL)
                    tq.push(top->left); 
                
                if (top->right != NULL) 
                    tq.push(top->right); 
            }
            no_of_levels++;
        }
        
        // Calculate level order traversal
        vector<vector<int>> res(no_of_levels);
        int curr = 0;
        if(root->left == NULL && root->right == NULL){
            res[curr].push_back(root->val);
            return res;
        }
        
        queue<TreeNode*> q;
        q.push(root);
        res[curr].push_back(root->val);
        curr++;
        
        while(!q.empty()){
            int len = q.size();
            while(len--){
                TreeNode* top = q.front();
                q.pop();
                
                if(top->left!=NULL){
                    res[curr].push_back(top->left->val);
                    q.push(top->left);
                }
                
                if(top->right!=NULL){
                    res[curr].push_back(top->right->val);
                    q.push(top->right);
                }
            }
            curr++;
        }
        return res;
    }
};