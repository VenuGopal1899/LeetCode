# Convert Sorted Array to Binary Search Tree

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* newNode(int val){
        TreeNode* node = new TreeNode();
        node->val = val;
        node->right = NULL;
        node->left = NULL;
        return node;
    }
    
    TreeNode* sort(vector<int>& nums, int start, int end){
        if(start>end)
            return NULL;
        int mid; 
        TreeNode* root;
        mid = start + (end - start)/2;
        root = newNode(nums[mid]);
        root->left = sort(nums, start, mid-1);
        root->right = sort(nums, mid+1, end);
        return root;
    }
    
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        int len = nums.size();
        TreeNode* root;
        root = sort(nums, 0, len-1);
        return root;
    }
};
